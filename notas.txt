CI/CD

CI (Continuous integration)

CI nos permite integrar nuestra aplicación constantemente.
La integración continua es un sistema de automatización que verifica la integridad/calidad del código para poder subirlo a producción


# Configuración de un workflow

1. name, este será el nombre con el que se idenfiticará el workflow dentro de la pestaña actions en gh.
2. on, evento que desencadenará la ejecución del workflow.
3. jobs, trabajos que se realizarán estos puede tener un nombre y dentro de ellos se definirá sobre qué máquina queremos correrlo (runs-on), luego habrá que definir los pasos que se deberán
   seguir.
4. steps, cada paso puede estar compuesto por un nombre (name) y una acción a ejecutar(run), cada paso debe ser iniciado con el signo (-)
   por ejemplo:
      steps:
      - uses: son acciones externas que se pueden utilizar dentro del workflow, la más común es actions/checkout@v# que sirve para traernos nuestro código
      - name: Nombre del paso (campo opcional)
      run: comando o script a ejecutar


Con CI para instalar las dependencias tiene un comando más optimizado que npm install
el cual npm ci, lo que hace este comando es instalar las dependencias basándose en lo que hay en el package.lock.json. Usando este comando en lugar del npm install hará que CI se realice unos
segundos más rápido

Dentro de la CI es necesario que tengamos una configuración que evite que un workflow tenga más de 1 ejecución ejecutandosé en paralelo

rollback --> descartar cambios y regresar a una versión estable y funcional de un proyecto

Para ejecutar jobs cuando se cumpla una condición se puede hacer con el campo if

Existe un documento llamado context object el cual contiene mucha información sobre el workflow

Dentro de un workflow se puede tener varios jobs y a su  vez cada job puede compartir información entre ellos, esto se hace mediante la empaquetación de información.
Para ello se puede utilizar un action llamado action/upload-artifact el cual guarda en la nube información a la cual podremos acceder dentro de otro job. Por ejemplo
si tenemos dos jobs uno que contruye la build y otro que realiza los test, el ultimo job (test) necesita la build para poder generar los test, por esa razón dentro del
job build agregaremos la siguiente acción:

- uses: action/upload-artifact@v#
  with:
   name: nombre del lugar en el que vamos a guardar la build
   path: path de la ubicación de la información que vamos a empaquetar (build)

Además de agregar ese step dentro de build, dentro del job test que es donde utilizaremos la build que se generó la build y la guardamos en la nube, debemos utilizar una acción
para descargar la build que se encuentra en la nube, esto se hace de agregando el siguiente paso dentro del job test
- name: actions/download-artifact@v2
  with:
   name: dist
   path: dist

Por último para ejecutar el job test necesitamos esperar primero que el job build ya se haya ejecutado y haya generado y guardado el build dentro de la nube para poder acceder al build desde
el job test, para especificar que un job depende de otro existe un campo del cual podemos hacer uso el cual se llama "needs" este campo recibe un arrays con los nombres de los jobs de los cuales
depende el job en el que lo definamos, por ejemplo

Dentro del job test colocaremos el siguente valor:

needs: [build]

Con lo cual estaremos indicando que test requiere que el job build se haya ejecutado antes